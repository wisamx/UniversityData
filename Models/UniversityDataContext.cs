 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;

using System.Text;
using System.ComponentModel.DataAnnotations;

namespace UniversityData.Models 
{
    public partial class UniversityDataContext : BrightstarEntityContext {
    	
    	static UniversityDataContext() 
    	{
            InitializeEntityMappingStore();
        }
        
        /// <summary>
        /// Initialize the internal cache of entity attribute information.
        /// </summary>
        /// <remarks>
        /// This method is normally invoked from the static constructor for the generated context class.
        /// It is provided as a public static method to enable the use of the cached entity attribute 
        /// information without the need to construct a context (typically in test code). 
        /// In normal application code you should never need to explicitly call this method.
        /// </remarks>
        public static void InitializeEntityMappingStore()
        {
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IAcademicOrganization));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IAcademicOrganization, UniversityData.Models.AcademicOrganization>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.ICollege));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.ICollege, UniversityData.Models.College>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IConsortium));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IConsortium, UniversityData.Models.Consortium>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IDegree));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IDegree, UniversityData.Models.Degree>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IDepartment));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IDepartment, UniversityData.Models.Department>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IDivision));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IDivision, UniversityData.Models.Division>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IEmployee));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IEmployee, UniversityData.Models.Employee>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IInstitute));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IInstitute, UniversityData.Models.Institute>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IMuseum));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IMuseum, UniversityData.Models.Museum>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IOrganization));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IOrganization, UniversityData.Models.Organization>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IPerson));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IPerson, UniversityData.Models.Person>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.ISchool));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.ISchool, UniversityData.Models.School>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IStudent));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IStudent, UniversityData.Models.Student>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(UniversityData.Models.IUniversity));
    		EntityMappingStore.Instance.SetImplMapping<UniversityData.Models.IUniversity, UniversityData.Models.University>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
    	public UniversityDataContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public UniversityDataContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
        ) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public UniversityDataContext() : base()
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public UniversityDataContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		AcademicOrganizations = 	new BrightstarEntitySet<UniversityData.Models.IAcademicOrganization>(this);
    		Colleges = 	new BrightstarEntitySet<UniversityData.Models.ICollege>(this);
    		Consortiums = 	new BrightstarEntitySet<UniversityData.Models.IConsortium>(this);
    		Degrees = 	new BrightstarEntitySet<UniversityData.Models.IDegree>(this);
    		Departments = 	new BrightstarEntitySet<UniversityData.Models.IDepartment>(this);
    		Divisions = 	new BrightstarEntitySet<UniversityData.Models.IDivision>(this);
    		Employees = 	new BrightstarEntitySet<UniversityData.Models.IEmployee>(this);
    		Institutes = 	new BrightstarEntitySet<UniversityData.Models.IInstitute>(this);
    		Museums = 	new BrightstarEntitySet<UniversityData.Models.IMuseum>(this);
    		Organizations = 	new BrightstarEntitySet<UniversityData.Models.IOrganization>(this);
    		Persons = 	new BrightstarEntitySet<UniversityData.Models.IPerson>(this);
    		Schools = 	new BrightstarEntitySet<UniversityData.Models.ISchool>(this);
    		Students = 	new BrightstarEntitySet<UniversityData.Models.IStudent>(this);
    		Universities = 	new BrightstarEntitySet<UniversityData.Models.IUniversity>(this);
    	}
    	
    	public IEntitySet<UniversityData.Models.IAcademicOrganization> AcademicOrganizations
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.ICollege> Colleges
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.IConsortium> Consortiums
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.IDegree> Degrees
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.IDepartment> Departments
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.IDivision> Divisions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.IEmployee> Employees
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.IInstitute> Institutes
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.IMuseum> Museums
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.IOrganization> Organizations
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.IPerson> Persons
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.ISchool> Schools
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.IStudent> Students
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<UniversityData.Models.IUniversity> Universities
    	{
    		get; private set;
    	}
    	
        public IEntitySet<T> EntitySet<T>() where T : class {
            var itemType = typeof(T);
            if (typeof(T).Equals(typeof(UniversityData.Models.IAcademicOrganization))) {
                return (IEntitySet<T>)this.AcademicOrganizations;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.ICollege))) {
                return (IEntitySet<T>)this.Colleges;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.IConsortium))) {
                return (IEntitySet<T>)this.Consortiums;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.IDegree))) {
                return (IEntitySet<T>)this.Degrees;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.IDepartment))) {
                return (IEntitySet<T>)this.Departments;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.IDivision))) {
                return (IEntitySet<T>)this.Divisions;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.IEmployee))) {
                return (IEntitySet<T>)this.Employees;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.IInstitute))) {
                return (IEntitySet<T>)this.Institutes;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.IMuseum))) {
                return (IEntitySet<T>)this.Museums;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.IOrganization))) {
                return (IEntitySet<T>)this.Organizations;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.IPerson))) {
                return (IEntitySet<T>)this.Persons;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.ISchool))) {
                return (IEntitySet<T>)this.Schools;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.IStudent))) {
                return (IEntitySet<T>)this.Students;
            }
            if (typeof(T).Equals(typeof(UniversityData.Models.IUniversity))) {
                return (IEntitySet<T>)this.Universities;
            }
            throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
        }
    
        } // end class UniversityDataContext
        
}
namespace UniversityData.Models 
{
    
    public partial class AcademicOrganization : BrightstarEntityObject, IAcademicOrganization 
    {
    	public AcademicOrganization(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public AcademicOrganization(BrightstarEntityContext context) : base(context, typeof(AcademicOrganization)) { }
    	public AcademicOrganization() : base() { }
    	#region Implementation of UniversityData.Models.IAcademicOrganization
    	public System.Collections.Generic.ICollection<UniversityData.Models.IDegree> offerseDegree
    	{
    		get { return GetRelatedObjects<UniversityData.Models.IDegree>("offerseDegree"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("offerseDegree", value); }
    								}
    	#endregion
    	#region Implementation of UniversityData.Models.IOrganization
    	
    	[System.ComponentModel.DataAnnotations.RequiredAttribute]
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public UniversityData.Models.IPerson HeadedBy
    	{
            get { return GetRelatedObject<UniversityData.Models.IPerson>("HeadedBy"); }
            set { SetRelatedObject<UniversityData.Models.IPerson>("HeadedBy", value); }
    	}
    
    	public System.String Address
    	{
            		get { return GetRelatedProperty<System.String>("Address"); }
            		set { SetRelatedProperty("Address", value); }
    	}
    
    	public System.String Email
    	{
            		get { return GetRelatedProperty<System.String>("Email"); }
            		set { SetRelatedProperty("Email", value); }
    	}
    
    	public System.String Phone
    	{
            		get { return GetRelatedProperty<System.String>("Phone"); }
            		set { SetRelatedProperty("Phone", value); }
    	}
    
    	public System.String Fax
    	{
            		get { return GetRelatedProperty<System.String>("Fax"); }
            		set { SetRelatedProperty("Fax", value); }
    	}
    	public System.Collections.Generic.ICollection<UniversityData.Models.IOrganization> SubOrganizations
    	{
    		get { return GetRelatedObjects<UniversityData.Models.IOrganization>("SubOrganizations"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SubOrganizations", value); }
    								}
    
    	public UniversityData.Models.IOrganization ParentOrganization
    	{
            get { return GetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization"); }
            set { SetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization", value); }
    	}
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class College : BrightstarEntityObject, ICollege 
    {
    	public College(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public College(BrightstarEntityContext context) : base(context, typeof(College)) { }
    	public College() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of UniversityData.Models.ICollege
    	
    	[System.ComponentModel.DataAnnotations.RequiredAttribute]
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public UniversityData.Models.IUniversity University
    	{
            get { return GetRelatedObject<UniversityData.Models.IUniversity>("University"); }
            set { SetRelatedObject<UniversityData.Models.IUniversity>("University", value); }
    	}
    	public System.Collections.Generic.ICollection<UniversityData.Models.IDepartment> IDepartments
    	{
    		get { return GetRelatedObjects<UniversityData.Models.IDepartment>("IDepartments"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("IDepartments", value); }
    								}
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class Consortium : BrightstarEntityObject, IConsortium 
    {
    	public Consortium(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Consortium(BrightstarEntityContext context) : base(context, typeof(Consortium)) { }
    	public Consortium() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of UniversityData.Models.IConsortium
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class Degree : BrightstarEntityObject, IDegree 
    {
    	public Degree(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Degree(BrightstarEntityContext context) : base(context, typeof(Degree)) { }
    	public Degree() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of UniversityData.Models.IDegree
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class Department : BrightstarEntityObject, IDepartment 
    {
    	public Department(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Department(BrightstarEntityContext context) : base(context, typeof(Department)) { }
    	public Department() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of UniversityData.Models.IDepartment
    
    	public UniversityData.Models.ICollege College
    	{
            get { return GetRelatedObject<UniversityData.Models.ICollege>("College"); }
            set { SetRelatedObject<UniversityData.Models.ICollege>("College", value); }
    	}
    	#endregion
    	#region Implementation of UniversityData.Models.IAcademicOrganization
    	public System.Collections.Generic.ICollection<UniversityData.Models.IDegree> offerseDegree
    	{
    		get { return GetRelatedObjects<UniversityData.Models.IDegree>("offerseDegree"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("offerseDegree", value); }
    								}
    	#endregion
    	#region Implementation of UniversityData.Models.IOrganization
    	
    	[System.ComponentModel.DataAnnotations.RequiredAttribute]
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public UniversityData.Models.IPerson HeadedBy
    	{
            get { return GetRelatedObject<UniversityData.Models.IPerson>("HeadedBy"); }
            set { SetRelatedObject<UniversityData.Models.IPerson>("HeadedBy", value); }
    	}
    
    	public System.String Address
    	{
            		get { return GetRelatedProperty<System.String>("Address"); }
            		set { SetRelatedProperty("Address", value); }
    	}
    
    	public System.String Email
    	{
            		get { return GetRelatedProperty<System.String>("Email"); }
            		set { SetRelatedProperty("Email", value); }
    	}
    
    	public System.String Phone
    	{
            		get { return GetRelatedProperty<System.String>("Phone"); }
            		set { SetRelatedProperty("Phone", value); }
    	}
    
    	public System.String Fax
    	{
            		get { return GetRelatedProperty<System.String>("Fax"); }
            		set { SetRelatedProperty("Fax", value); }
    	}
    	public System.Collections.Generic.ICollection<UniversityData.Models.IOrganization> SubOrganizations
    	{
    		get { return GetRelatedObjects<UniversityData.Models.IOrganization>("SubOrganizations"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SubOrganizations", value); }
    								}
    
    	public UniversityData.Models.IOrganization ParentOrganization
    	{
            get { return GetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization"); }
            set { SetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization", value); }
    	}
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class Division : BrightstarEntityObject, IDivision 
    {
    	public Division(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Division(BrightstarEntityContext context) : base(context, typeof(Division)) { }
    	public Division() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of UniversityData.Models.IDivision
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class Employee : BrightstarEntityObject, IEmployee 
    {
    	public Employee(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Employee(BrightstarEntityContext context) : base(context, typeof(Employee)) { }
    	public Employee() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of UniversityData.Models.IEmployee
    	#endregion
    	#region Implementation of UniversityData.Models.IPerson
    
    	public System.String FirstName
    	{
            		get { return GetRelatedProperty<System.String>("FirstName"); }
            		set { SetRelatedProperty("FirstName", value); }
    	}
    
    	public System.String LastName
    	{
            		get { return GetRelatedProperty<System.String>("LastName"); }
            		set { SetRelatedProperty("LastName", value); }
    	}
    
    	public System.String Label
    	{
            		get { return GetRelatedProperty<System.String>("Label"); }
            		set { SetRelatedProperty("Label", value); }
    	}
    
    	public System.String Address
    	{
            		get { return GetRelatedProperty<System.String>("Address"); }
            		set { SetRelatedProperty("Address", value); }
    	}
    
    	public System.String Image
    	{
            		get { return GetRelatedProperty<System.String>("Image"); }
            		set { SetRelatedProperty("Image", value); }
    	}
    
    	public System.String Phone
    	{
            		get { return GetRelatedProperty<System.String>("Phone"); }
            		set { SetRelatedProperty("Phone", value); }
    	}
    
    	public System.String PrimaryEmail
    	{
            		get { return GetRelatedProperty<System.String>("PrimaryEmail"); }
            		set { SetRelatedProperty("PrimaryEmail", value); }
    	}
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class Institute : BrightstarEntityObject, IInstitute 
    {
    	public Institute(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Institute(BrightstarEntityContext context) : base(context, typeof(Institute)) { }
    	public Institute() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of UniversityData.Models.IInstitute
    	#endregion
    	#region Implementation of UniversityData.Models.IAcademicOrganization
    	public System.Collections.Generic.ICollection<UniversityData.Models.IDegree> offerseDegree
    	{
    		get { return GetRelatedObjects<UniversityData.Models.IDegree>("offerseDegree"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("offerseDegree", value); }
    								}
    	#endregion
    	#region Implementation of UniversityData.Models.IOrganization
    	
    	[System.ComponentModel.DataAnnotations.RequiredAttribute]
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public UniversityData.Models.IPerson HeadedBy
    	{
            get { return GetRelatedObject<UniversityData.Models.IPerson>("HeadedBy"); }
            set { SetRelatedObject<UniversityData.Models.IPerson>("HeadedBy", value); }
    	}
    
    	public System.String Address
    	{
            		get { return GetRelatedProperty<System.String>("Address"); }
            		set { SetRelatedProperty("Address", value); }
    	}
    
    	public System.String Email
    	{
            		get { return GetRelatedProperty<System.String>("Email"); }
            		set { SetRelatedProperty("Email", value); }
    	}
    
    	public System.String Phone
    	{
            		get { return GetRelatedProperty<System.String>("Phone"); }
            		set { SetRelatedProperty("Phone", value); }
    	}
    
    	public System.String Fax
    	{
            		get { return GetRelatedProperty<System.String>("Fax"); }
            		set { SetRelatedProperty("Fax", value); }
    	}
    	public System.Collections.Generic.ICollection<UniversityData.Models.IOrganization> SubOrganizations
    	{
    		get { return GetRelatedObjects<UniversityData.Models.IOrganization>("SubOrganizations"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SubOrganizations", value); }
    								}
    
    	public UniversityData.Models.IOrganization ParentOrganization
    	{
            get { return GetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization"); }
            set { SetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization", value); }
    	}
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class Museum : BrightstarEntityObject, IMuseum 
    {
    	public Museum(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Museum(BrightstarEntityContext context) : base(context, typeof(Museum)) { }
    	public Museum() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of UniversityData.Models.IMuseum
    	#endregion
    	#region Implementation of UniversityData.Models.IOrganization
    	
    	[System.ComponentModel.DataAnnotations.RequiredAttribute]
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public UniversityData.Models.IPerson HeadedBy
    	{
            get { return GetRelatedObject<UniversityData.Models.IPerson>("HeadedBy"); }
            set { SetRelatedObject<UniversityData.Models.IPerson>("HeadedBy", value); }
    	}
    
    	public System.String Address
    	{
            		get { return GetRelatedProperty<System.String>("Address"); }
            		set { SetRelatedProperty("Address", value); }
    	}
    
    	public System.String Email
    	{
            		get { return GetRelatedProperty<System.String>("Email"); }
            		set { SetRelatedProperty("Email", value); }
    	}
    
    	public System.String Phone
    	{
            		get { return GetRelatedProperty<System.String>("Phone"); }
            		set { SetRelatedProperty("Phone", value); }
    	}
    
    	public System.String Fax
    	{
            		get { return GetRelatedProperty<System.String>("Fax"); }
            		set { SetRelatedProperty("Fax", value); }
    	}
    	public System.Collections.Generic.ICollection<UniversityData.Models.IOrganization> SubOrganizations
    	{
    		get { return GetRelatedObjects<UniversityData.Models.IOrganization>("SubOrganizations"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SubOrganizations", value); }
    								}
    
    	public UniversityData.Models.IOrganization ParentOrganization
    	{
            get { return GetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization"); }
            set { SetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization", value); }
    	}
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class Organization : BrightstarEntityObject, IOrganization 
    {
    	public Organization(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Organization(BrightstarEntityContext context) : base(context, typeof(Organization)) { }
    	public Organization() : base() { }
    	#region Implementation of UniversityData.Models.IOrganization
    	
    	[System.ComponentModel.DataAnnotations.RequiredAttribute]
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public UniversityData.Models.IPerson HeadedBy
    	{
            get { return GetRelatedObject<UniversityData.Models.IPerson>("HeadedBy"); }
            set { SetRelatedObject<UniversityData.Models.IPerson>("HeadedBy", value); }
    	}
    
    	public System.String Address
    	{
            		get { return GetRelatedProperty<System.String>("Address"); }
            		set { SetRelatedProperty("Address", value); }
    	}
    
    	public System.String Email
    	{
            		get { return GetRelatedProperty<System.String>("Email"); }
            		set { SetRelatedProperty("Email", value); }
    	}
    
    	public System.String Phone
    	{
            		get { return GetRelatedProperty<System.String>("Phone"); }
            		set { SetRelatedProperty("Phone", value); }
    	}
    
    	public System.String Fax
    	{
            		get { return GetRelatedProperty<System.String>("Fax"); }
            		set { SetRelatedProperty("Fax", value); }
    	}
    	public System.Collections.Generic.ICollection<UniversityData.Models.IOrganization> SubOrganizations
    	{
    		get { return GetRelatedObjects<UniversityData.Models.IOrganization>("SubOrganizations"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SubOrganizations", value); }
    								}
    
    	public UniversityData.Models.IOrganization ParentOrganization
    	{
            get { return GetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization"); }
            set { SetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization", value); }
    	}
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class Person : BrightstarEntityObject, IPerson 
    {
    	public Person(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Person(BrightstarEntityContext context) : base(context, typeof(Person)) { }
    	public Person() : base() { }
    	#region Implementation of UniversityData.Models.IPerson
    
    	public System.String FirstName
    	{
            		get { return GetRelatedProperty<System.String>("FirstName"); }
            		set { SetRelatedProperty("FirstName", value); }
    	}
    
    	public System.String LastName
    	{
            		get { return GetRelatedProperty<System.String>("LastName"); }
            		set { SetRelatedProperty("LastName", value); }
    	}
    
    	public System.String Label
    	{
            		get { return GetRelatedProperty<System.String>("Label"); }
            		set { SetRelatedProperty("Label", value); }
    	}
    
    	public System.String Address
    	{
            		get { return GetRelatedProperty<System.String>("Address"); }
            		set { SetRelatedProperty("Address", value); }
    	}
    
    	public System.String Image
    	{
            		get { return GetRelatedProperty<System.String>("Image"); }
            		set { SetRelatedProperty("Image", value); }
    	}
    
    	public System.String Phone
    	{
            		get { return GetRelatedProperty<System.String>("Phone"); }
            		set { SetRelatedProperty("Phone", value); }
    	}
    
    	public System.String PrimaryEmail
    	{
            		get { return GetRelatedProperty<System.String>("PrimaryEmail"); }
            		set { SetRelatedProperty("PrimaryEmail", value); }
    	}
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class School : BrightstarEntityObject, ISchool 
    {
    	public School(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public School(BrightstarEntityContext context) : base(context, typeof(School)) { }
    	public School() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of UniversityData.Models.ISchool
    	#endregion
    	#region Implementation of UniversityData.Models.IAcademicOrganization
    	public System.Collections.Generic.ICollection<UniversityData.Models.IDegree> offerseDegree
    	{
    		get { return GetRelatedObjects<UniversityData.Models.IDegree>("offerseDegree"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("offerseDegree", value); }
    								}
    	#endregion
    	#region Implementation of UniversityData.Models.IOrganization
    	
    	[System.ComponentModel.DataAnnotations.RequiredAttribute]
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public UniversityData.Models.IPerson HeadedBy
    	{
            get { return GetRelatedObject<UniversityData.Models.IPerson>("HeadedBy"); }
            set { SetRelatedObject<UniversityData.Models.IPerson>("HeadedBy", value); }
    	}
    
    	public System.String Address
    	{
            		get { return GetRelatedProperty<System.String>("Address"); }
            		set { SetRelatedProperty("Address", value); }
    	}
    
    	public System.String Email
    	{
            		get { return GetRelatedProperty<System.String>("Email"); }
            		set { SetRelatedProperty("Email", value); }
    	}
    
    	public System.String Phone
    	{
            		get { return GetRelatedProperty<System.String>("Phone"); }
            		set { SetRelatedProperty("Phone", value); }
    	}
    
    	public System.String Fax
    	{
            		get { return GetRelatedProperty<System.String>("Fax"); }
            		set { SetRelatedProperty("Fax", value); }
    	}
    	public System.Collections.Generic.ICollection<UniversityData.Models.IOrganization> SubOrganizations
    	{
    		get { return GetRelatedObjects<UniversityData.Models.IOrganization>("SubOrganizations"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SubOrganizations", value); }
    								}
    
    	public UniversityData.Models.IOrganization ParentOrganization
    	{
            get { return GetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization"); }
            set { SetRelatedObject<UniversityData.Models.IOrganization>("ParentOrganization", value); }
    	}
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class Student : BrightstarEntityObject, IStudent 
    {
    	public Student(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Student(BrightstarEntityContext context) : base(context, typeof(Student)) { }
    	public Student() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of UniversityData.Models.IStudent
    	#endregion
    	#region Implementation of UniversityData.Models.IPerson
    
    	public System.String FirstName
    	{
            		get { return GetRelatedProperty<System.String>("FirstName"); }
            		set { SetRelatedProperty("FirstName", value); }
    	}
    
    	public System.String LastName
    	{
            		get { return GetRelatedProperty<System.String>("LastName"); }
            		set { SetRelatedProperty("LastName", value); }
    	}
    
    	public System.String Label
    	{
            		get { return GetRelatedProperty<System.String>("Label"); }
            		set { SetRelatedProperty("Label", value); }
    	}
    
    	public System.String Address
    	{
            		get { return GetRelatedProperty<System.String>("Address"); }
            		set { SetRelatedProperty("Address", value); }
    	}
    
    	public System.String Image
    	{
            		get { return GetRelatedProperty<System.String>("Image"); }
            		set { SetRelatedProperty("Image", value); }
    	}
    
    	public System.String Phone
    	{
            		get { return GetRelatedProperty<System.String>("Phone"); }
            		set { SetRelatedProperty("Phone", value); }
    	}
    
    	public System.String PrimaryEmail
    	{
            		get { return GetRelatedProperty<System.String>("PrimaryEmail"); }
            		set { SetRelatedProperty("PrimaryEmail", value); }
    	}
    	#endregion
    }
}
namespace UniversityData.Models 
{
    
    public partial class University : BrightstarEntityObject, IUniversity 
    {
    	public University(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public University(BrightstarEntityContext context) : base(context, typeof(University)) { }
    	public University() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of UniversityData.Models.IUniversity
    	
    	[System.ComponentModel.DataAnnotations.RequiredAttribute]
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    	public System.Collections.Generic.ICollection<UniversityData.Models.ICollege> Colleges
    	{
    		get { return GetRelatedObjects<UniversityData.Models.ICollege>("Colleges"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Colleges", value); }
    								}
    	#endregion
    }
}
